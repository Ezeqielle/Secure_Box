import { useState, useEffect } from 'react';
import { useNavigate, useParams } from "react-router-dom";
import { getFetch } from '../utils/functions';
import Button from 'react-bootstrap/Button';
import { ArrowLeftCircle } from 'react-bootstrap-icons';
import Session from 'react-session-api'

Session.config(true, 60)

const Vulnerability = () => {

    const [portProtocol, setPortProtocol] = useState("");
    const [portNumber, setPortNumber] = useState("");
    const [serviceName, setServiceName] = useState("");
    const [serviceProduct, setServiceProduct] = useState("");
    const [serviceVendor, setServiceVendor] = useState("");
    const [serviceVersion, setServiceVersion] = useState("");

    const [cveName, setCveName] = useState("");
    const [cveDate, setCveDate] = useState("");
    const [cveCvss, setCveCvss] = useState(0);
    const [cveCvssButtonClassName, setCveCvssButtonClassName] = useState("");
    const [cveCvssButtonName, setCveCvssButtonName] = useState("");
    const [cveImpactAvailability, setCveImpactAvailability] = useState("");
    const [cveImpactConfidentiality, setCveImpactConfidentiality] = useState("");
    const [cveImpactIntegrity, setCveImpactIntegrity] = useState("");
    const [cveAccessVector, setCveAccessVector] = useState("");
    const [cveAccessComplexity, setCveAccessComplexity] = useState("");
    const [cveSummary, setCveSummary] = useState("");
    const [cveReferences, setCveReferences] = useState({});

    let { portId, cveId } = useParams();

    const getPortInfo = async () => {
        const cveInfo = await getFetch({ username: Session.get("username"), token: Session.get("token"), portId }, "/getPort")
        setPortProtocol(cveInfo.data.port.port_protocol)
        setPortNumber(cveInfo.data.port.port_number)
        setServiceName(cveInfo.data.port.service_name)
        setServiceProduct(cveInfo.data.port.service_product)
        setServiceVendor(cveInfo.data.port.service_vendor)
        setServiceVersion(cveInfo.data.port.service_version)
    }

    const getCVEInfo = async () => {
        const cveInfo = await getFetch({ username: Session.get("username"), token: Session.get("token"), cveId }, "/getCVE")
        setCveName(cveInfo.data.cve.cve_name)
        setCveDate(cveInfo.data.cve.cve_published)
        setCveImpactAvailability(cveInfo.data.cve.cve_impact_avaibility)
        setCveImpactConfidentiality(cveInfo.data.cve.cve_impact_confidentiality)
        setCveImpactIntegrity(cveInfo.data.cve.cve_impact_integrity)
        setCveAccessVector(cveInfo.data.cve.cve_access_vector)
        setCveAccessComplexity(cveInfo.data.cve.cve_access_complexity)
        setCveCvss(cveInfo.data.cve.cve_cvss)
        setCveReferences(JSON.parse(cveInfo.data.cve.cve_references))
        setCveSummary(cveInfo.data.cve.cve_summary)

        if (cveInfo.data.cve.cve_cvss < 4) {
            setCveCvssButtonClassName("badge rounded-pill bg-success")
            setCveCvssButtonName("Low")
        } else if (cveInfo.data.cve.cve_cvss < 7) {
            setCveCvssButtonClassName("badge rounded-pill bg-primary")
            setCveCvssButtonName("Medium")
        } else if (cveInfo.data.cve.cve_cvss < 9) {
            setCveCvssButtonClassName("badge rounded-pill bg-warning")
            setCveCvssButtonName("High")
        } else {
            setCveCvssButtonClassName("badge rounded-pill bg-danger")
            setCveCvssButtonName("Critical")
        }
    }

    let navigate = useNavigate();

    useEffect(() => {

        if (Session.get("username") == undefined || Session.get("token") == undefined) {
            return navigate("/login");
        }

        getCVEInfo()
        getPortInfo()

    }, []);


    return (
        <div className="container-fluid">
            <div className="d-sm-flex justify-content-between align-items-center mb-4">
                <Button variant="outline-dark" onClick={() => navigate(-1)}><ArrowLeftCircle /> Back</Button>
            </div>
            <h3 className="text-dark mb-4"><span className={cveCvssButtonClassName}>{cveCvssButtonName}</span>&nbsp;{cveName}</h3>
            <h6 className="text-dark mb-4">&nbsp;{cveSummary}</h6>
            <div className="card shadow mb-5">
                <div className="card-header py-3">
                    <p className="text-primary m-0 fw-bold">Service/Port</p>
                </div>
                <div className="card-body">
                    <form>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="portNumber"><strong>Port</strong></label><input className="form-control" type="port" id="portNumber" placeholder="None" name="portNumber" value={portNumber == null ? "" : portNumber} onChange={e => setPortNumber(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="portProtocol"><strong>Protocol</strong></label><input className="form-control" type="text" id="portProtocol" placeholder="None" name="portProtocol" value={portProtocol == null ? "" : portProtocol} onChange={e => setPortProtocol(e.target.value)} /></div>
                            </div>
                        </div>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="serviceName"><strong>Service Name</strong></label><input className="form-control" type="text" id="serviceName" placeholder="None" name="serviceName" value={serviceName == null ? "" : serviceName} onChange={e => setServiceName(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="serviceProduct"><strong>Service Product</strong></label><input className="form-control" type="text" id="serviceProduct" placeholder="None" name="serviceProduct" value={serviceProduct == null ? "" : serviceProduct} onChange={e => setServiceProduct(e.target.value)} /></div>
                            </div>
                        </div>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="serviceVendor"><strong>Service Vendor</strong></label><input className="form-control" type="text" id="serviceVendor" placeholder="None" name="serviceVendor" value={serviceVendor == null ? "" : serviceVendor} onChange={e => setServiceVendor(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="serviceVersion"><strong>Service Version</strong></label><input className="form-control" type="text" id="serviceVersion" placeholder="None" name="serviceVersion" value={serviceVersion == null ? "" : serviceVersion} onChange={e => setServiceVersion(e.target.value)} /></div>
                            </div>
                        </div>
                        <div className="mb-3"></div>
                    </form>
                </div>
            </div>
            <div className="card shadow mb-5">
                <div className="card-header py-3">
                    <p className="text-primary m-0 fw-bold">CVE Details</p>
                </div>
                <div className="card-body">
                    <form>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="id"><strong>ID</strong></label><input className="form-control" type="text" id="id" placeholder="None" name="id" value={cveId} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="last_name"><strong>CVSS score&nbsp;</strong></label>
                                    <p><span className={cveCvssButtonClassName}>{cveCvss}</span></p>
                                </div>
                            </div>
                        </div>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="cve"><strong>CVE</strong></label><input className="form-control" type="text" id="cve" placeholder="None" name="cve" value={cveName == null ? "" : cveName} onChange={e => setCveName(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="date"><strong>Published Date</strong></label><input className="form-control" type="text" id="date" placeholder="None" name="date" value={cveDate == null ? "" : cveDate} onChange={e => setCveDate(e.target.value)} /></div>
                            </div>
                        </div>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="cveImpactAvailability"><strong>Impact Availability :</strong><br /></label><input className="form-control" type="text" id="cveImpactAvailability" placeholder="None" name="cveImpactAvailability" value={cveImpactAvailability == null ? "" : cveImpactAvailability} onChange={e => setCveImpactAvailability(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="cveImpactConfidentiality"><strong>Impact Confidentiality :</strong><br /></label><input className="form-control" type="text" id="cveImpactConfidentiality" placeholder="None" name="cveImpactConfidentiality" value={cveImpactConfidentiality == null ? "" : cveImpactConfidentiality} onChange={e => setCveImpactConfidentiality(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="cveImpactIntegrity"><strong>Impact Integrity :</strong><br /></label><input className="form-control" type="text" id="cveImpactIntegrity" placeholder="None" name="cveImpactIntegrity" value={cveImpactIntegrity == null ? "" : cveImpactIntegrity} onChange={e => setCveImpactIntegrity(e.target.value)} /></div>
                            </div>
                        </div>
                        <div className="row">
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="cveAccessVector"><strong>Access Vector :</strong><br /></label><input className="form-control" type="text" id="cveAccessVector" placeholder="None" name="first_nacveAccessVectore" value={cveAccessVector == null ? "" : cveAccessVector} onChange={e => setCveAccessVector(e.target.value)} /></div>
                            </div>
                            <div className="col">
                                <div className="mb-3"><label className="form-label" htmlFor="cveAccessComplexity"><strong>Access Complexity :</strong><br /></label><input className="form-control" type="text" id="cveAccessComplexity" placeholder="None" name="cveAccessComplexity" value={cveAccessComplexity == null ? "" : cveAccessComplexity} onChange={e => setCveAccessComplexity(e.target.value)} /></div>
                            </div>
                        </div>
                        <div className="mb-3"></div>
                    </form>
                    <ul></ul>
                    <div className="row">
                        <div className="col">
                            <h4>References</h4>
                            <ul>
                                {Object.entries(cveReferences).map(([key, value]) => (
                                    <li key={"li-" + key}><a key={"a-" + key} href={value} target="_blank">{value}</a></li>
                                ))}
                            </ul>
                        </div>
                    </div>
                    <div className="col"></div>
                </div>
            </div>
        </div>
    )
}
export default Vulnerability;