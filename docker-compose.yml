version: "3.9"
services:
  db:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - "mysql_db_data_container:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: example
    networks:
      backend:
        ipv4_address: 10.21.22.4

  adminer:
    image: adminer
    restart: always
    ports:
      - 5050:8080
    networks:
      frontend:
        ipv4_address: 10.20.21.5
      backend:
        ipv4_address: 10.21.22.5

  cve_search:
    image: cve_search
    build:
      context: ./CVE-Search-Docker
      dockerfile: docker/images/cve_search/dockerfile-cve_search
      args:
        - REPO=cve-search/cve-search
        - BRANCH=master
    hostname: cve_search
    depends_on:
      - redis
      - mongo
    restart: always
    environment:
      - PYTHONUNBUFFERED=TRUE
      - WORKER_SIZE=1
    ports:
      - 5000:5000
    networks:
      backend:
        ipv4_address: 10.21.22.6

  redis:
    image: cve_search-redis
    hostname: redis
    restart: always
    build:
      context: ./CVE-Search-Docker
      dockerfile: docker/images/redis/dockerfile-redis
    volumes:
      - "./CVE-Search-Docker/.cve_search_data/cve_search_redis:/data"
    ports:
      - 6379:6379
    networks:
      backend:
        ipv4_address: 10.21.22.7

  mongo:
    image: cve_search-mongo
    hostname: mongo
    restart: always
    build:
      context: ./CVE-Search-Docker
      dockerfile: docker/images/mongodb/dockerfile-mongo
    volumes:
      - "./CVE-Search-Docker/.cve_search_data/cve_search_mongodb:/data/db"
    ports:
      - 27017:27017
    networks:
      backend:
        ipv4_address: 10.21.22.8
        
  exploit-db:
    image: vuls/go-exploitdb
    restart: unless-stopped
    ports:
      - 1326:1326
    command: server --debug --bind 0.0.0.0
    volumes:
      - ./vuls:/go-exploitdb
      - ./vuls-log:/var/log/vuls
    networks:
      backend:
        ipv4_address: 10.21.22.9
  
  vuln-scanner-frontend:
    hostname: vulnScannerFront
    restart: always
    build:
      context: ./vuln-scanner/frontend
      dockerfile: Dockerfile
    ports:
      - 443:443
    networks:
      frontend:
        ipv4_address: 10.20.21.10
  
  vuln-scanner-backend:
    hostname: vulnScannerBack
    restart: always
    build:
      context: ./vuln-scanner/backend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    networks:
      frontend:
        ipv4_address: 10.20.21.11
      backend:
        ipv4_address: 10.21.22.11

volumes:
  mysql_db_data_container:
networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.20.21.0/24
          gateway: 10.20.21.1
  backend:
    driver: bridge
    ipam:
     config:
       - subnet: 10.21.22.0/24
         gateway: 10.21.22.1
